# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'malware.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from subprocess import Popen, PIPE
from datetime import datetime
import NDMS
import os
import random
from warnings import WarningMessage
import requests, json
import hashlib

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1217, 953)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/Icons/nmap_94081.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setAccessibleDescription("")
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.Parent_frame = QtWidgets.QFrame(self.frame)
        self.Parent_frame.setGeometry(QtCore.QRect(0, 0, 1211, 871))
        self.Parent_frame.setStyleSheet("")
        self.Parent_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Parent_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Parent_frame.setObjectName("Parent_frame")
        self.Menubar_frame = QtWidgets.QFrame(self.Parent_frame)
        self.Menubar_frame.setGeometry(QtCore.QRect(0, 0, 1211, 71))
        self.Menubar_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Menubar_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Menubar_frame.setObjectName("Menubar_frame")
        self.startstop_widget = QtWidgets.QWidget(self.Menubar_frame)
        self.startstop_widget.setGeometry(QtCore.QRect(-1, 0, 291, 71))
        self.startstop_widget.setObjectName("startstop_widget")
        self.startMalwareScanButton = QtWidgets.QPushButton(self.startstop_widget, clicked=lambda:self.startMalware())
        self.startMalwareScanButton.setGeometry(QtCore.QRect(30, 10, 71, 51))
        self.startMalwareScanButton.setStyleSheet("background-color : rgb(78, 154, 6)")
        self.startMalwareScanButton.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/Icons/Start_37108.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.startMalwareScanButton.setIcon(icon1)
        self.startMalwareScanButton.setIconSize(QtCore.QSize(40, 40))
        self.startMalwareScanButton.setObjectName("startMalwareScanButton")
        self.DomainReputation_Button = QtWidgets.QPushButton(self.startstop_widget, clicked=lambda:self.subDomainRep())
        self.DomainReputation_Button.setGeometry(QtCore.QRect(170, 10, 89, 51))
        self.DomainReputation_Button.setText("")
        self.DomainReputation_Button.setIcon(icon)
        self.DomainReputation_Button.setIconSize(QtCore.QSize(50, 50))
        self.DomainReputation_Button.setObjectName("DomainReputation_Button")
        self.menubar_line = QtWidgets.QFrame(self.Menubar_frame)
        self.menubar_line.setGeometry(QtCore.QRect(280, 0, 20, 71))
        self.menubar_line.setFrameShape(QtWidgets.QFrame.VLine)
        self.menubar_line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.menubar_line.setObjectName("menubar_line")
        self.line = QtWidgets.QFrame(self.Menubar_frame)
        self.line.setGeometry(QtCore.QRect(810, 0, 16, 71))
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.openFile_Button = QtWidgets.QPushButton(self.Menubar_frame)
        self.openFile_Button.setGeometry(QtCore.QRect(350, 10, 81, 51))
        self.openFile_Button.setStyleSheet("background-color : rgb(85, 87, 83)")
        self.openFile_Button.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/Icons/open-file_40455.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.openFile_Button.setIcon(icon2)
        self.openFile_Button.setIconSize(QtCore.QSize(50, 50))
        self.openFile_Button.setObjectName("openFile_Button")
        self.exitAppButton = QtWidgets.QPushButton(self.Menubar_frame, clicked=lambda:self.exitApp())
        self.exitAppButton.setGeometry(QtCore.QRect(740, 10, 71, 51))
        self.exitAppButton.setStyleSheet("background-color : rgb(204, 0, 0)")
        self.exitAppButton.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/Icons/button_exit_15724.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.exitAppButton.setIcon(icon3)
        self.exitAppButton.setIconSize(QtCore.QSize(50, 50))
        self.exitAppButton.setObjectName("exitAppButton")
        self.subDomain_Button = QtWidgets.QPushButton(self.Menubar_frame, clicked=lambda:self.SubDOmainScan())
        self.subDomain_Button.setGeometry(QtCore.QRect(540, 10, 71, 51))
        self.subDomain_Button.setStyleSheet("")
        self.subDomain_Button.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/Icons/icons8-broken-link-64.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.subDomain_Button.setIcon(icon4)
        self.subDomain_Button.setIconSize(QtCore.QSize(50, 50))
        self.subDomain_Button.setObjectName("subDomain_Button")
        self.scanOutput_Tab = QtWidgets.QTabWidget(self.Parent_frame)
        self.scanOutput_Tab.setGeometry(QtCore.QRect(10, 160, 1181, 691))
        self.scanOutput_Tab.setStyleSheet("")
        self.scanOutput_Tab.setObjectName("scanOutput_Tab")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.malwareResult_TextEdit = QtWidgets.QTextEdit(self.tab)
        self.malwareResult_TextEdit.setGeometry(QtCore.QRect(10, 10, 1161, 641))
        self.malwareResult_TextEdit.setTabChangesFocus(False)
        self.malwareResult_TextEdit.setDocumentTitle("")
        self.malwareResult_TextEdit.setReadOnly(True)
        self.malwareResult_TextEdit.setObjectName("malwareResult_TextEdit")
        self.scanOutput_Tab.addTab(self.tab, "")
        self.osintOutput_tab = QtWidgets.QWidget()
        self.osintOutput_tab.setObjectName("osintOutput_tab")
        self.scrollArea = QtWidgets.QScrollArea(self.osintOutput_tab)
        self.scrollArea.setGeometry(QtCore.QRect(10, 10, 1151, 641))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents_3 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_3.setGeometry(QtCore.QRect(0, 0, 1149, 639))
        self.scrollAreaWidgetContents_3.setObjectName("scrollAreaWidgetContents_3")
        self.domainRepResult_TextEdit = QtWidgets.QTextEdit(self.scrollAreaWidgetContents_3)
        self.domainRepResult_TextEdit.setGeometry(QtCore.QRect(10, 10, 1131, 621))
        self.domainRepResult_TextEdit.setReadOnly(True)
        self.domainRepResult_TextEdit.setObjectName("domainRepResult_TextEdit")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents_3)
        self.scanOutput_Tab.addTab(self.osintOutput_tab, "")
        self.webOutput_tab = QtWidgets.QWidget()
        self.webOutput_tab.setObjectName("webOutput_tab")
        self.scrollArea_2 = QtWidgets.QScrollArea(self.webOutput_tab)
        self.scrollArea_2.setGeometry(QtCore.QRect(10, 10, 1151, 631))
        self.scrollArea_2.setWidgetResizable(True)
        self.scrollArea_2.setObjectName("scrollArea_2")
        self.scrollAreaWidgetContents_4 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_4.setGeometry(QtCore.QRect(0, 0, 1149, 629))
        self.scrollAreaWidgetContents_4.setObjectName("scrollAreaWidgetContents_4")
        self.SubdomainResult_TextEdit = QtWidgets.QTextEdit(self.scrollAreaWidgetContents_4)
        self.SubdomainResult_TextEdit.setGeometry(QtCore.QRect(10, 10, 1131, 611))
        self.SubdomainResult_TextEdit.setTabChangesFocus(False)
        self.SubdomainResult_TextEdit.setDocumentTitle("")
        self.SubdomainResult_TextEdit.setReadOnly(True)
        self.SubdomainResult_TextEdit.setObjectName("SubdomainResult_TextEdit")
        self.scrollArea_2.setWidget(self.scrollAreaWidgetContents_4)
        self.scanOutput_Tab.addTab(self.webOutput_tab, "")
        self.scaninput_widget = QtWidgets.QWidget(self.Parent_frame)
        self.scaninput_widget.setGeometry(QtCore.QRect(10, 80, 1201, 61))
        self.scaninput_widget.setObjectName("scaninput_widget")
        self.splitter = QtWidgets.QSplitter(self.scaninput_widget)
        self.splitter.setGeometry(QtCore.QRect(40, 20, 611, 25))
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        self.target_label = QtWidgets.QLabel(self.splitter)
        self.target_label.setWordWrap(False)
        self.target_label.setObjectName("target_label")
        self.target_input = QtWidgets.QLineEdit(self.splitter)
        self.target_input.setObjectName("target_input")
        self.splitter_2 = QtWidgets.QSplitter(self.scaninput_widget)
        self.splitter_2.setGeometry(QtCore.QRect(730, 20, 421, 25))
        self.splitter_2.setOrientation(QtCore.Qt.Horizontal)
        self.splitter_2.setObjectName("splitter_2")
        self.verticalLayout.addWidget(self.frame)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1217, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuView = QtWidgets.QMenu(self.menubar)
        self.menuView.setObjectName("menuView")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionopen_target_file = QtWidgets.QAction(MainWindow)
        self.actionopen_target_file.setObjectName("actionopen_target_file")
        self.actionsave_scan = QtWidgets.QAction(MainWindow)
        self.actionsave_scan.setObjectName("actionsave_scan")
        self.actionopen_scan_file = QtWidgets.QAction(MainWindow)
        self.actionopen_scan_file.setObjectName("actionopen_scan_file")
        self.actionfind_out_more = QtWidgets.QAction(MainWindow)
        self.actionfind_out_more.setObjectName("actionfind_out_more")
        self.actionlog = QtWidgets.QAction(MainWindow)
        self.actionlog.setObjectName("actionlog")
        self.menuView.addAction(self.actionlog)
        self.menuHelp.addAction(self.actionfind_out_more)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        self.scanOutput_Tab.setCurrentIndex(2)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Malware and Domain Scanner"))
        self.DomainReputation_Button.setWhatsThis(_translate("MainWindow", "Discover more information about target(OSINT)"))
        self.malwareResult_TextEdit.setPlaceholderText(_translate("MainWindow", "Result of file malware scan will appear hear."))
        self.scanOutput_Tab.setTabText(self.scanOutput_Tab.indexOf(self.tab), _translate("MainWindow", "Malware Scanner"))
        self.domainRepResult_TextEdit.setPlaceholderText(_translate("MainWindow", "ANY  SERVICES ON THE INTERNET THAT MAY FURTHER EXPOSE THEIR SYSTEMS WILL BE DISPLAYED HERE IF AVAILABLE"))
        self.scanOutput_Tab.setTabText(self.scanOutput_Tab.indexOf(self.osintOutput_tab), _translate("MainWindow", "Domain Reputation"))
        self.SubdomainResult_TextEdit.setPlaceholderText(_translate("MainWindow", "ANY SUB DOMAIN AND WEB DIRECTORIES DISCOVERED OF A POSSIBLE WEB SERVER TARGET WILL BE DISPLAYED HERE"))
        self.scanOutput_Tab.setTabText(self.scanOutput_Tab.indexOf(self.webOutput_tab), _translate("MainWindow", "Sub Domain Output"))
        self.target_label.setText(_translate("MainWindow", " Enter Domain Name/File name: "))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuView.setTitle(_translate("MainWindow", "View"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actionopen_target_file.setText(_translate("MainWindow", " open target file"))
        self.actionsave_scan.setText(_translate("MainWindow", "save scan"))
        self.actionopen_scan_file.setText(_translate("MainWindow", "open scan file"))
        self.actionfind_out_more.setText(_translate("MainWindow", "find out more"))
        self.actionlog.setText(_translate("MainWindow", "scan logs"))


    # Function to return target
    def get_target(self) -> str:
        target_unstripped = self.target_input.text()
        target  = target_unstripped.strip()
        return target

    # Function to start domain reputation scan
    def subDomainRep(self):
        print('subdomain reputation buttion clicked')

    def startMalware(self):
        print('malware scanner buttion clicked')
        target  = self.get_target()
        self.scanObject = FileScanner(target)
        self.scanThread1 = QtCore.QThread()
        self.scanObject.moveToThread(self.scanThread1)
        self.scanObject.sendScanResult.connect(self.setTextEdit, type=QtCore.Qt.QueuedConnection)
        app.processEvents()
        self.scanObject.finished.connect(self.scanThread1.quit)
        self.scanThread1.started.connect(self.scanObject.run)
        self.malwareResult_TextEdit.clear()
        self.malwareResult_TextEdit.insertPlainText(' Malware Scanning in Progress. Please wait.......')
        self.scanThread1.start()



    def exitApp(self):
        QtWidgets.QApplication.instance().quit()

    def get_target(self) -> str:
        target_unstripped = self.target_input.text()
        target  = target_unstripped.strip()
        return target

    def SubDOmainScan(self):
        print('subdomain button clicked')
        target    = self.get_target()
        self.subDomainObject = crtshAPI(target)
        self.scanThread3 = QtCore.QThread()
        self.subDomainObject.moveToThread(self.scanThread3)
        self.subDomainObject.sendSubResult.connect(self.setSubResult,type=QtCore.Qt.QueuedConnection)
        self.SubdomainResult_TextEdit.setText('Discovering sub-domains of target. Please wait...........')
        app.processEvents()
        self.subDomainObject.finished.connect(self.scanThread3.quit)
        self.scanThread3.started.connect(self.subDomainObject.run)
        self.scanThread3.start()

    def setTextEdit(self,val):
        self.malwareResult_TextEdit.clear()
        message = val["message"]
        engine_name = val["engine name"]
        engine_nameText = "Engine name: " + engine_name
        version = val["version"]
        versionText = "Version: "+ version
        malicious = val["malicious"]
        if malicious == '0': 
            mal = 'no'
        else:
            mal = 'yes'
        maliciousText = "Is file malicious: "+ mal
        undetected = val["undetected"]
        undetectedText = "Number of engines(undetected): "+ undetected
        self.malwareResult_TextEdit.append(message)
        self.malwareResult_TextEdit.append(engine_nameText)
        self.malwareResult_TextEdit.append(versionText)
        self.malwareResult_TextEdit.append(maliciousText)
        self.malwareResult_TextEdit.append(undetectedText)


    def setSubResult(self,val):
        print('sub scan')
        print(val)
        self.SubdomainResult_TextEdit.clear()
        for values in val:
            self.SubdomainResult_TextEdit.append(values)

    

class crtshAPI(QtCore.QObject):
    """crtshAPI main handler."""
    finished        = QtCore.pyqtSignal() # Determine if scan is finished
    sendSubResult  = QtCore.pyqtSignal(list) #Emit scan results
    errors          = QtCore.pyqtSignal(str) # Emit errors

    def __init__(self,domain):
        super().__init__()
        self.domain = domain

    def run(self):
        domain = self.domain
        wildcard=True
        # expired=True

        base_url = "https://crt.sh/?q={}&output=json"
        # if not expired:
        #     # base_url = base_url + "&exclude=expired"
        #     base_url = base_url + "&exclude=expired"

        if wildcard and "%" not in domain:
            domain = "%.{}".format(domain)
        url = base_url.format(domain)

        ua = 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.1'
        req = requests.get(url, headers={'User-Agent': ua})
        
        if req.ok:
            try:
                content = req.content.decode('utf-8')
                data = json.loads(content)
                subdomains = []
                for i in data:
                    subdomains.append(i['common_name'])
                self.sendSubResult.emit(subdomains)
                self.finished.emit()
                app.processEvents()
                QtWidgets.QApplication.sendPostedEvents()                
                QtWidgets.QApplication.processEvents()  

            except Exception as err:
                print("Error retrieving information.")
                self.finished.emit()
                app.processEvents()
                QtWidgets.QApplication.sendPostedEvents()                
                QtWidgets.QApplication.processEvents()  
                print(err)
        return None


# File malware scanner
class FileScanner(QtCore.QObject):
    finished        = QtCore.pyqtSignal() # Determine if scan is finished
    sendScanResult  = QtCore.pyqtSignal(dict) #Emit scan results change to dict
    errors          = QtCore.pyqtSignal(str) # Emit errors

    def __init__(self,filePath):
        super().__init__()
        self.filePath = filePath
        self.VT_API_KEY = '046fd634f48bd7a2e2af287a4f602962fd6f948edc75a316de76f60dc659af93'
        self.VT_API_URL = "https://www.virustotal.com/api/v3/"
        self.headers = {
            "x-apikey" : self.VT_API_KEY,
            "User-Agent" : "vtscan v.1.0",
            "Accept-Encoding" : "gzip, deflate",
        }

    def run(self):
        self.upload()
        self.analyse()

    def upload(self):
        file = self.filePath
        upload_url = self.VT_API_URL + "files"
        files = {"file" : (
            os.path.basename(self.filePath),
            open(os.path.abspath(self.filePath), "rb"))
        }
        res = requests.post(upload_url, headers = self.headers, files = files)
        if res.status_code == 200:
            result = res.json()
            self.file_id = result.get("data").get("id")
            print (self.file_id)
            print ("successfully upload PE file: OK")
        else:
            self.errors.emit("failed to upload PE file with Status Code: ", str(res.status_code))
            self.finished.emit()
            QtWidgets.QApplication.sendPostedEvents()
            QtWidgets.QApplication.processEvents()  
            self.finished.emit()
            print ("failed to upload PE file :(",end='')
            print ("status code: " + str(res.status_code))



    def analyse(self):
        print ("get info about the results of analysis...")
        analysis_url = self.VT_API_URL + "analyses/" + self.file_id
        res = requests.get(analysis_url, headers = self.headers)
        if res.status_code == 200:
            result = res.json()
            status = result.get("data").get("attributes").get("status")
            if status == "completed":
                stats = result.get("data").get("attributes").get("stats")
                results = result.get("data").get("attributes").get("results")
                malicious = str(stats.get("malicious"))
                undetected = str(stats.get("undetected"))
                for k in results:
                    if results[k].get("category") == "malicious":
                        version = results[k].get("engine_version")
                        engine_name = results[k].get("engine_name")
                        category = results[k].get("category")
                print ("successfully analyse: OK" )
                version = results[k].get("engine_version")
                engine_name = results[k].get("engine_name")
                category = results[k].get("category")
                scanResult = results[k].get("result")
                method = results[k].get("method")
                update = results[k].get("engine_update")
                message = "successfully analyse: OK"
                virus_Scan = {
                    "message": message,
                    "engine name": engine_name,
                    "version":version, 
                    "malicious": malicious,
                    "undetected": undetected,
                    }
                print(virus_Scan)
                self.sendScanResult.emit(virus_Scan)
                self.finished.emit()
                QtWidgets.QApplication.sendPostedEvents()
                QtWidgets.QApplication.processEvents()  
                self.finished.emit()
            elif status == "queued":
                print ("status QUEUED...")
                with open(os.path.abspath(self.filePath), "rb") as malware_path:
                    b = malware_path.read()
                    hashsum = hashlib.sha256(b).hexdigest()
                    self.info(hashsum)
        else:
            self.errors.emit( "failed to get results of analysis :( \n Status Code: ", res.status_code )
            self.finished.emit()
            QtWidgets.QApplication.sendPostedEvents()
            QtWidgets.QApplication.processEvents()  
            self.finished.emit()
            print ( "failed to get results of analysis :(")
            print ( "status code: " + str(res.status_code))
        return None


    def info(self, file_hash):
        print (Colors.BLUE + "get file info by ID: " + file_hash + Colors.ENDC)
        info_url = self.VT_API_URL + "files/" + file_hash
        res = requests.get(info_url, headers = self.headers)
        if res.status_code == 200:
            result = res.json()
            if result.get("data").get("attributes").get("last_analysis_results"):
                stats = result.get("data").get("attributes").get("last_analysis_stats")
                results = result.get("data").get("attributes").get("last_analysis_results")
                malicious = str(stats.get("malicious"))
                undetected = str(stats.get("undetected"))
                for k in results:
                    if results[k].get("category") == "malicious":
                        version = results[k].get("engine_version")
                        engine_name = results[k].get("engine_name")
                        category = results[k].get("category")
                        scanResult = results[k].get("result")
                        method = results[k].get("method")
                        update = results[k].get("engine_update")
                        message = "successfully analyse: OK"
                        virus_Scan = {
                            "message": message,
                            "engine name": engine_name,
                            "version":version, 
                            "malicious": malicious,
                            "undetected": undetected,
                            }
                message = "successfully analyse: OK"
                version = results[k].get("engine_version")
                engine_name = results[k].get("engine_name")
                category = results[k].get("category")
                scanResult = results[k].get("result")
                method = results[k].get("method")
                update = results[k].get("engine_update")
                message = "successfully analyse: OK"
                virus_Scan = {
                    "message": message,
                    "engine name": engine_name,
                    "version":version, 
                    "malicious": malicious,
                    "undetected": undetected,
                    }
                print(virus_Scan)
                self.sendScanResult.emit(virus_Scan)
                self.finished.emit()
                QtWidgets.QApplication.sendPostedEvents()
                QtWidgets.QApplication.processEvents()  
                self.finished.emit()

            else:
                print (Colors.BLUE + "failed to analyse :(..." + Colors.ENDC)
                self.errors.emit( "failed to get results of analysis...check your network")
                self.finished.emit()
                QtWidgets.QApplication.sendPostedEvents()
                QtWidgets.QApplication.processEvents()  
                self.finished.emit()

        else:
            self.errors.emit( "failed to get results of analysis :( \n Status Code: ",res.status_code )
            self.finished.emit()
            QtWidgets.QApplication.sendPostedEvents()
            QtWidgets.QApplication.processEvents()  
            self.finished.emit()
            print (Colors.RED + "failed to get information :(" + Colors.ENDC)
            print (Colors.RED + "status code: " + str(res.status_code) + Colors.ENDC)


# for terminal colors
class Colors:
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    PURPLE = '\033[95m'
    ENDC = '\033[0m'


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
